// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  namaormawa    String?
  telepon       String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  isAdmin       Boolean   @default(false) @map("is_admin")
  image         String?
  accounts      Account[]
  sessions      Session[]
  carts         Cart[]
  Pinjam        Pinjam[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Items {
  id            String   @id @default(cuid())
  name          String
  image         String
  initialStock  Int @map("initial_stock")
  stock         Int
  carts         Cart[]
  pinjamItem    PinjamItem[]
  available     Boolean
 
  @@map("items")
} 


model Cart {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  quantity  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     Items  @relation(fields: [productId], references: [id], onDelete: Cascade)
 
  @@unique([userId, productId])
  @@map("carts")
}

model Pinjam {
  id            String       @id @default(cuid())
  userId        String       @map("user_id")
  namaOrmawa    String       @map("nama_ormawa")
  namaKegiatan  String      @map("nama_kegiatan")
  nama          String       @map("nama")
  telepon       String       @map("telepon")
  pdflink       String       @map("pdf_link")
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         PinjamItem[] 
  status        String       @default("pending")
  createdAt     DateTime     @default(now())
  startDate     DateTime     @map("start_date")
  endDate       DateTime     @map("end_date")
 
  @@map("pinjam")
}

model PinjamItem {
  id        String   @id @default(cuid())
  pinjamId  String   @map("pinjam_id")
  itemId    String   @map("item_id")
  quantity  Int      @default(1)

  pinjam    Pinjam   @relation(fields: [pinjamId], references: [id], onDelete: Cascade)
  items     Items    @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([pinjamId, itemId])
  @@map("pinjam_items")
}